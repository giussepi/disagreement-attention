# -*- coding: utf-8 -*-
""" settings """

import os
import logging

import torch
from gtorch_utils.segmentation import torchmetrics
from monai import transforms as ts

###############################################################################
#                                GENERAL CONFIG                               #
###############################################################################

BASE_PATH = os.getenv("HOME")
PROJECT_PATH = os.path.join(BASE_PATH, '<path to your project>')
# https://pytorch.org/tutorials/recipes/recipes/amp_recipe.html#all-together-automatic-mixed-precision
USE_AMP = False  # Automatic Mixed Precision
LOG_LEVEL = logging.INFO
CUDA = True
MULTIGPUS = True
PATCH_REPLICATION_CALLBACK = True
EPOCHS = 1000
COTRAINING = False
# Metrics to be used by ModelMGR and CoTraining


def get_metrics():
    """ avoiding circular import """
    from gtorch_utils.nns.utils.metrics import MetricItem
    return [
        MetricItem(torchmetrics.DiceCoefficient(), main=True),
        # MetricItem(torchmetrics.Specificity()),
        # MetricItem(torchmetrics.Recall()),
        # MetricItem(torchmetrics.Accuracy()),
        # MetricItem(torchmetrics.BalancedAccuracy()),

    ]


DISABLE_PROGRESS_BAR = False

if CUDA == MULTIGPUS == True and torch.cuda.is_available():
    NUM_GPUS = torch.cuda.device_count()
else:
    NUM_GPUS = 1  # When working with only 1 GPU or CPU

BATCH_SIZE = 2
TOTAL_BATCH_SIZE = BATCH_SIZE * NUM_GPUS
NUM_WORKERS = 16  # set it to 0 when debugging the dataset
DB_CACHE = False  # The dataset should receive it as argument

###############################################################################
#                    gtorch_utils/nns/utils/sync_batchnorm/                   #
###############################################################################

DATA_DIMENSIONS = 3

###############################################################################
#                                     NNS                                     #
###############################################################################

DIR_CHECKPOINTS = os.path.join(PROJECT_PATH, 'checkpoints')
PLOT_DIRECTORY = os.path.join(PROJECT_PATH, 'plots')

###############################################################################
#                                     ct82                                    #
###############################################################################

CT82_SIZE = [368, 368, -1]  # [height, width, scans]
CT82_CROP_SHAPE = [32, 80, 80]  # [46, 80, 80] [96, 160, 160] [scans, heigh, width]
CT82_NUM_CROPS = 1  # 2
CT82_TRANSFORMS = {
    'train': ts.Compose([
        ts.ToTensord(keys=['img', 'mask']),
        ts.CropForegroundd(keys=['img', 'mask'], source_key='img', select_fn=lambda x: x > 0),
        ts.RandAxisFlipd(keys=['img', 'mask'], prob=.5),
        ts.RandAffined(
            keys=['img', 'mask'],
            prob=1.,
            rotate_range=0.261799,  # 15 degrees
            translate_range=[0*CT82_SIZE[2], 0.1*CT82_SIZE[0], 0.1*CT82_SIZE[1]],
            scale_range=((-0.3,  0.3), (-0.3, 0.3), (-0.3, 0.3)),
            mode=["bilinear", "nearest"]
        ),
        ts.RandCropByPosNegLabeld(
            keys=['img', 'mask'],
            label_key='mask',
            spatial_size=CT82_CROP_SHAPE,
            pos=1,  # .5,
            neg=0,  # .5,
            num_samples=CT82_NUM_CROPS,
        ),
    ]),
    'valtest': ts.Compose([
        ts.ToTensord(keys=['img', 'mask']),
        ts.CropForegroundd(keys=['img', 'mask'], source_key='img', select_fn=lambda x: x > 0),
        ts.RandCropByPosNegLabeld(
            keys=['img', 'mask'],
            label_key='mask',
            spatial_size=CT82_CROP_SHAPE,
            pos=1,  # .5,
            neg=0,  # .5,
            num_samples=CT82_NUM_CROPS,
        ),
    ])
}
CT82_TRAIN_PATH = os.path.join(PROJECT_PATH, 'CT-82-Pro', 'train')
CT82_VAL_PATH = os.path.join(PROJECT_PATH, 'CT-82-Pro', 'val')
CT82_TEST_PATH = os.path.join(PROJECT_PATH, 'CT-82-Pro', 'test')

###############################################################################
#                                    LiTS17                                   #
###############################################################################

# LITS17 1 32x80x80-crops dataset #############################################

# LITS17_SIZE = [368, 368, -1]  # [height, width, scans]
# LITS17_CROP_SHAPE = [32, 80, 80]  # [scans, heigh, width]
# LITS17_NUM_CROPS = 1
# LITS17_TRANSFORMS = {
#     'train': ts.Compose([
#         ts.ToTensord(keys=['img', 'mask']),
#         # comment for LiTS17CropDataset
#         ts.CropForegroundd(keys=['img', 'mask'], source_key='img', select_fn=lambda x: x > .5),
#         ts.RandAxisFlipd(keys=['img', 'mask'], prob=.5),
#         # comment for LiTS17CropDataset
#         ts.RandAffined(
#             keys=['img', 'mask'],
#             prob=1.,
#             rotate_range=0.261799,  # 15 degrees
#             # comment for LiTS17CropDataset
#             translate_range=[0.1*LITS17_SIZE[2], 0.1*LITS17_SIZE[0], 0.1*LITS17_SIZE[1]],
#             # comment for LiTS17CropDataset
#             scale_range=((-0.3,  0.3), (-0.3, 0.3), (-0.3, 0.3)),
#             # uncomment for LiTS17CropDataset
#             # scale_range=((-0.3, 0), (-0.3, 0), (-0.3, 0)),
#             mode=["bilinear", "nearest"]
#         ),
#         # comment for LiTS17CropDataset
#         ts.RandCropByLabelClassesd(
#             keys=['img', 'mask'],
#             label_key='mask',
#             spatial_size=LITS17_CROP_SHAPE,
#             ratios=[.5, .5],  # [0, 1],
#             num_classes=2,
#             num_samples=LITS17_NUM_CROPS,
#             image_key='img',  # 'mask',
#             image_threshold=0.38,  # 0,
#         ),
#     ]),
#     'valtest': ts.Compose([
#         ts.ToTensord(keys=['img', 'mask']),
#         # comment for LiTS17CropDataset
#         ts.CropForegroundd(keys=['img', 'mask'], source_key='img', select_fn=lambda x: x > .5),
#         # comment for LiTS17CropDataset
#         ts.RandCropByLabelClassesd(
#             keys=['img', 'mask'],
#             label_key='mask',
#             spatial_size=LITS17_CROP_SHAPE,
#             ratios=[0, 1],
#             num_classes=2,
#             num_samples=LITS17_NUM_CROPS,
#             image_key='mask',
#             image_threshold=0,
#         ),
#     ])
# }
# LITS17_TRAIN_PATH = os.path.join(PROJECT_PATH, 'LiTS17-Pro', 'train')
# LITS17_VAL_PATH = os.path.join(PROJECT_PATH, 'LiTS17-Pro', 'val')
# LITS17_TEST_PATH = os.path.join(PROJECT_PATH, 'LiTS17-Pro', 'test')


# LITS17 16 32x160x160-crops dataset ###########################################

# NOTE: update the following line to reflect the locations of the datasets (created or to be created)
# set it to PROJECT_PATH if the datasets are or will be in the project root directory
LITS17_SAVING_PATH = os.path.join(os.sep, 'media', 'giussepi', 'TOSHIBA EXT')
LITS17_NEW_DB_NAME = 'LiTS17Lesion-Pro'  # processed lits17 lesion dataset name
LITS17_NEW_CROP_DB_NAME = 'LiTS17Lesion-Pro-16PositiveCrops32x160x160'  # crop lits17 lesion dataset name
LITS17_SIZE = (368, 368, -2)  # [height, width, scans]
LITS17_CROP_SHAPE = (32, 160, 160)
LITS17_NUM_CROPS = 16
LITS17_TRANSFORMS = {
    'train': ts.Compose([
        ts.ToTensord(keys=['img', 'mask']),
        ts.RandAxisFlipd(keys=['img', 'mask'], prob=.5),
    ]),
    'valtest': ts.Compose([
        ts.ToTensord(keys=['img', 'mask']),
    ])
}
LITS17_TRAIN_PATH = os.path.join(LITS17_SAVING_PATH, LITS17_NEW_CROP_DB_NAME, 'train')
LITS17_VAL_PATH = os.path.join(LITS17_SAVING_PATH, LITS17_NEW_CROP_DB_NAME, 'val')
LITS17_TEST_PATH = os.path.join(LITS17_SAVING_PATH, LITS17_NEW_CROP_DB_NAME, 'test')


###############################################################################
#                                  DEBUGGING                                  #
###############################################################################

DEBUG = False

if DEBUG:
    # Add any extra debugging behaviour here
    LOG_LEVEL = logging.DEBUG
    # MULTIGPUS = False
    # NUM_GPUS = 1
    # TOTAL_BATCH_SIZE = BATCH_SIZE * NUM_GPUS
    NUM_WORKERS = 0  # necessary to properly use the breakpoints
